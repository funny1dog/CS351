import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextField;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Shape;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

/**
 * This class is the controller for the chooseShape.fxml file.
 * It is responsible for the behavior of that page. Namely, generating
 * the shapes based on user input then painting those to the screen.
 */
public class ChooseShape {
    @FXML
    private AnchorPane root;
    @FXML
    private ComboBox<ShapesToChoose> chooseShape;
    @FXML
    private VBox controls;
    @FXML
    private TextField howManyValue;
    @FXML
    private CheckBox randomColorsCB;
    @FXML
    private Pane canvas;

    /**
     * The initialize function is a JavaFX that runs after all the FXML objects
     * have been created and linked to this controller. If you tried to put this
     * code in the constructor it would give a null pointer exception.
     */
    public void initialize() {
        chooseShape.getItems().addAll(Arrays.asList(ShapesToChoose.values()));
        chooseShape.setValue(ShapesToChoose.CIRCLE);
    }

    /**
     * This function is responsible for generating all the shapes on the canvas.
     * It does this by looking at the controls on the screen to determine what the
     * user wants then calling {@link #makeShapes(ShapesToChoose, int, boolean, double, double)}
     * to generate a list of shapes that it then adds to the graph of the canvas.
     * @param actionEvent ActionEvent generated by JavaFX when the button is clicked
     */
    public void generateClicked(ActionEvent actionEvent) {
        ShapesToChoose shape = chooseShape.getValue();

        int howMany = Integer.parseInt(howManyValue.getText());

        boolean randomColors = randomColorsCB.isSelected();

//        System.out.println("canvas.getWidth() = " + canvas.getWidth());
//        System.out.println("canvas.getHeight() = " + canvas.getHeight());
        List<Shape> shapesToDraw = makeShapes(shape, howMany, randomColors, canvas.getWidth(), canvas.getHeight());

        canvas.getChildren().addAll(shapesToDraw);
    }

    /**
     * This function simply clears the graph from the canvas.
     * @param actionEvent ActionEvent generated by JavaFX when the button is clicked
     */
    public void resetClicked(ActionEvent actionEvent) {
        canvas.getChildren().clear();
    }

    /**
     * This function generates a random color with a constant opacity of 1.
     * @return The newly generated random Color
     */
    private static Color randomColor() {
        ThreadLocalRandom rand = ThreadLocalRandom.current();
        return new Color(rand.nextDouble(), rand.nextDouble(), rand.nextDouble(), 1);
    }

    /**
     * This function is responsible for generating the shapes to be put on the canvas.
     * @param shape Type of shape to generate
     * @param howMany How many shapes to generate
     * @param randomColors Should they all be random colors?
     * @param width Width of the canvas
     * @param height Height of the canvas
     * @return The list of newly generated shapes
     */
    private List<Shape> makeShapes(ShapesToChoose shape, int howMany, boolean randomColors,
                                   double width, double height) {
        List<Shape> shapes = new ArrayList<>();

        Color color = randomColor();

        for (int i = 0; i < howMany; i++) {
            Shape shapeToAdd = shape.toRandomShape(width, height);
            shapeToAdd.setFill(color);
            shapes.add(shapeToAdd);

            if (randomColors) {
                color =  randomColor();
            }
        }
        return shapes;
    }
}
